rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ===== UTILITY FUNCTIONS =====
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuth() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isTeacher() {
      return isAuth() && exists(/databases/$(database)/documents/teachers/$(request.auth.uid));
    }
    
    // ===== USER PROFILES =====
    // Users can read and write to their own profile document.
    match /students/{userId} {
      allow read, write: if isUser(userId);
    }
    match /teachers/{userId} {
      allow read, write: if isUser(userId);
    }
    match /admins/{userId} {
      allow read, write: if isUser(userId);
    }

    // ===== COLLECTIONS =====
    // Admins and Teachers can read/write batches. Students can also read them.
    match /batches/{batchId} {
      allow read: if isAuth(); // Any authenticated user can read batch details
      allow write: if isTeacher() || isAdmin();
    }
    
    // Admins and Teachers can read/write attendance. Students can read their own.
    // NOTE: The app currently uses mock data for attendance. This rule is for when it's moved to Firestore.
    match /attendanceRecords/{recordId} {
       allow read: if (isTeacher() || isAdmin()) || (isAuth() && resource.data.studentId == request.auth.uid);
       allow write: if isTeacher() || isAdmin();
    }

    // Admins and Teachers can read/write timetables. Students can also read them.
    // NOTE: The app currently uses mock data for timetables. This rule is for when it's moved to Firestore.
    match /timetables/{timetableId} {
       allow read: if isAuth();
       allow write: if isTeacher() || isAdmin();
    }

    // ===== GLOBAL ACCESS =====
    // For fetching lists of users (e.g. students for an admin), the app uses server-side API routes
    // with the Firebase Admin SDK, which bypasses these client-side rules.
    // If client-side list fetching were needed, you would add rules like:
    // allow list: if isAdmin();
  }
}
