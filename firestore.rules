
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    // Check if the requesting user's UID exists as a document ID in the 'admins' collection.
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Check if the requesting user's UID exists as a document ID in the 'teachers' collection.
    function isTeacher() {
      return exists(/databases/$(database)/documents/teachers/$(request.auth.uid));
    }
    
    // Check if the requesting user's UID exists as a document ID in the 'hosts' collection.
    function isHost() {
      return exists(/databases/$(database)/documents/hosts/$(request.auth.uid));
    }

    // Check if the requesting user's UID matches the 'uid' field in the document they are trying to access.
    // This is used for collections where the doc ID is not the user's UID (e.g., students).
    function isOwner(doc) {
      return request.auth.uid == doc.data.uid;
    }

    // COLLECTION RULES

    // Students can be read by admins, teachers, hosts, or the student themselves.
    // Students can only be written to by admins or hosts.
    // Student registration is handled by a backend function, so direct client creation is not needed.
    match /students/{studentId} {
      allow read: if request.auth != null && (isOwner(resource) || isAdmin() || isTeacher() || isHost());
      allow write: if request.auth != null && (isAdmin() || isHost());
    }

    // Teachers can be read by any authenticated user.
    // They can only be updated by themselves (the owner) or by an admin/host.
    // Creation and deletion is restricted to admins/hosts.
    match /teachers/{teacherId} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth != null && (isAdmin() || isHost());
      allow update: if request.auth != null && (request.auth.uid == teacherId || isAdmin() || isHost());
    }

    // Admins can be read by any authenticated user.
    // They can only be updated by themselves (the owner) or by a host.
    // Creation and deletion is restricted to hosts.
    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth != null && isHost();
      allow update: if request.auth != null && (request.auth.uid == adminId || isHost());
    }
    
    // Hosts can be read by other authenticated hosts or admins.
    match /hosts/{hostId} {
        allow read: if request.auth != null && (isHost() || isAdmin());
        // Writes to hosts collection should be done via backend/console only.
        allow write: if false; 
    }

    // Batches can be read by any authenticated user.
    // Batches can only be written to by admins or hosts.
    match /batches/{batchId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (isAdmin() || isHost());
    }

    // AttendanceRecords can be read by the student it belongs to, or any admin/teacher/host.
    // Attendance can only be written by admins or hosts.
    match /attendanceRecords/{recordId} {
      allow read: if request.auth != null && (resource.data.studentId == request.auth.uid || isAdmin() || isTeacher() || isHost());
      write: if request.auth != null && (isAdmin() || isHost());
    }
  }
}
